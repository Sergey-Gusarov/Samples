package ru.breffi.Biocad2StoryReplicator;
import ru.breffi.storyclmsdk.Exceptions.AsyncResultException;
import ru.breffi.storyclmsdk.Exceptions.AuthFaliException;

import java.util.Calendar;

import java.util.GregorianCalendar;


import com.sforce.soap.partner.DeleteResult;
import com.sforce.soap.partner.PartnerConnection;
import com.sforce.soap.partner.QueryResult;
import com.sforce.soap.partner.SaveResult;
import com.sforce.soap.partner.Error;
import com.sforce.soap.partner.GetUpdatedResult;
import com.sforce.soap.partner.sobject.SObject;
import com.sforce.ws.ConnectionException;

import ru.breffi.PartnerTypeConverterService.employee.service.Service;

public class Main {
  
  static final String USERNAME = "vova.klyuev@breffi.ru";
  static final String PASSWORD = "Qwe510091#mq2rBYRxEPtryhBtMOyqjpAd";
  static PartnerConnection connection;

  public static void main(String[] args) throws AsyncResultException, ConnectionException {
	  	Replicator r = new Replicator();
	  	r.storyConfig = new StoryLoginConfig();
	  	r.storyConfig.ClientId="client_18";
	  	r.storyConfig.ClientSecret = "595a2fb724604e51a1f9e43b808c76c915c2e0f74e8840b384218a0e354f6de6";
	  	r.sfconfig = new SalesForceLoginConfig();
	  	r.sfconfig.UserName = USERNAME;
	  	r.sfconfig.Password = PASSWORD;
	  	Service s = new Service();
	  	
	  	try{
	  		r.Replicate(s);	
	  	}
	  	
	  	catch(AuthFaliException e){
	  		e.printStackTrace();
	  	}
  }
  
  // queries and displays the 5 newest contacts
  private static void queryContacts() {
    
    System.out.println("Querying for the 5 newest Contacts...");
    
    try {
       
      // query for the 5 newest contacts      
      QueryResult queryResults = connection.query("SELECT Id, Name FROM Employee__c where LastModifiedDate > 2017-04-14T12:35:40-00:00 ORDER BY CreatedDate DESC LIMIT 5");
      
      GetUpdatedResult updatedResult = connection.getUpdated("Employee__c", new GregorianCalendar(2014, Calendar.FEBRUARY, 11), Calendar.getInstance());
     // updatedResult.getIds()
      
      
      if (queryResults.getSize() > 0) {
    	  for (SObject s: queryResults.getRecords()) {
    	    System.out.println("Id: " + s.getId() + " " + s.getField("FirstName") + " " + 
    	        s.getField("LastName") + " - " + s.getChild("Account").getField("Name"));
    	  }
    	}
      
    } catch (Exception e) {
      e.printStackTrace();
    }    
    
  }
  
  // create 5 test Accounts
  private static void createAccounts() {
    
    System.out.println("Creating 5 new test Accounts...");
    SObject[] records = new SObject[5];

    try {
       
      // create 5 test accounts
      for (int i=0;i<5;i++) {
        SObject so = new SObject();
        so.setType("Account");
        so.setField("Name", "Test Account "+i);
        records[i] = so;
      }

      
      // create the records in Salesforce.com
      SaveResult[] saveResults = connection.create(records);
      
      // check the returned results for any errors
      for (int i=0; i< saveResults.length; i++) {
        if (saveResults[i].isSuccess()) {
          System.out.println(i+". Successfully created record - Id: " + saveResults[i].getId());
        } else {
          Error[] errors = saveResults[i].getErrors();
          for (int j=0; j< errors.length; j++) {
            System.out.println("ERROR creating record: " + errors[j].getMessage());
          }
        }    
      }
      
    } catch (Exception e) {
      e.printStackTrace();
    }    
    
  }
  
  // updates the 5 newly created Accounts
  private static void updateAccounts() {
    
    System.out.println("Update the 5 new test Accounts...");
    SObject[] records = new SObject[5];
    
    try {
       
      QueryResult queryResults = connection.query("SELECT Id, Name FROM Account ORDER BY " +
      		"CreatedDate DESC LIMIT 5");
      if (queryResults.getSize() > 0) {
    	  for (int i=0;i<queryResults.getRecords().length;i++) {
    	    SObject so = (SObject)queryResults.getRecords()[i];
    	    System.out.println("Updating Id: " + so.getId() + " - Name: "+so.getField("Name"));
    	    // create an sobject and only send fields to update
    	    SObject soUpdate = new SObject();
    	    soUpdate.setType("Account");
    	    soUpdate.setId(so.getId());
    	    soUpdate.setField("Name", so.getField("Name")+" -- UPDATED");
    	    records[i] = soUpdate;
    	  }
    	}

      
      // update the records in Salesforce.com
      SaveResult[] saveResults = connection.update(records);
      
      // check the returned results for any errors
      for (int i=0; i< saveResults.length; i++) {
        if (saveResults[i].isSuccess()) {
          System.out.println(i+". Successfully updated record - Id: " + saveResults[i].getId());
        } else {
          Error[] errors = saveResults[i].getErrors();
          for (int j=0; j< errors.length; j++) {
            System.out.println("ERROR updating record: " + errors[j].getMessage());
          }
        }    
      }
      
    } catch (Exception e) {
      e.printStackTrace();
    }    
    
  }
  
  // delete the 5 newly created Account
  private static void deleteAccounts() {
    
    System.out.println("Deleting the 5 new test Accounts...");
    String[] ids = new String[5];
    
    try {
       
      QueryResult queryResults = connection.query("SELECT Id, Name FROM Account ORDER BY CreatedDate DESC LIMIT 5");
      if (queryResults.getSize() > 0) {
    	  for (int i=0;i<queryResults.getRecords().length;i++) {
    	    SObject so = (SObject)queryResults.getRecords()[i];
    	    ids[i] = so.getId();
    	    System.out.println("Deleting Id: " + so.getId() + " - Name: "+so.getField("Name"));
    	  }
    	}

      
      // delete the records in Salesforce.com by passing an array of Ids
      DeleteResult[] deleteResults = connection.delete(ids);
      
      // check the results for any errors
      for (int i=0; i< deleteResults.length; i++) {
        if (deleteResults[i].isSuccess()) {
          System.out.println(i+". Successfully deleted record - Id: " + deleteResults[i].getId());
        } else {
          Error[] errors = deleteResults[i].getErrors();
          for (int j=0; j< errors.length; j++) {
            System.out.println("ERROR deleting record: " + errors[j].getMessage());
          }
        }    
      }
      
    } catch (Exception e) {
      e.printStackTrace();
    }    
    
  }
 
}